#!python

"""
PYTHONPATH=$(pwd) scripts/audiolibrary /media/BlackBox/Music/flac/some_file

"""
import copy
import os
import pprint
import sys

import mutagen
from mutagen.flac import FLAC

from jibaudio.musicbrains import MusicBrainsInfo

genres = ["alternative", "alternative rock", "progressive rock", "rock"]


class AudioLibrarian:
    def __init__(self, filenames):
        self._src_filenames = filenames
        self._info = self._get_info()

        c = copy.deepcopy(self._info)
        c["front_cover"] = len(self._info["front_cover"])
        pprint.pp(c)

        os.system(f'cp "{self._src_filenames[0]}" delme.flac')
        song = FLAC("delme.flac")
        song.delete()
        song.clear_pictures()
        song.update(
            {
                "ARTIST": self._info["artist"],
                "ALBUM": self._info["album"],
                "ALBUMARTIST": self._info["sort-name"],
                "DATE": self._info["year"],
                "GENRE": self._info["genre"].title(),
                "TITLE": self._info["tracks"]["1"],
                "TRACKNUMBER": "1",
                "TRACKTOTAL": str(len(self._info["tracks"])),
            }
        )
        if self._info["front_cover"]:
            cover = mutagen.flac.Picture()
            cover.type = 3
            cover.mime = "image/jpeg"
            cover.desc = "front cover"
            cover.data = self._info["front_cover"]
            song.add_picture(cover)
        song.save()

    def _get_artist_album_from_tags(self):
        for filename in self._src_filenames:
            album, artist = None, None
            song = mutagen.File(filename)
            print(song.tags)
            artist = (
                artist
                or song.tags.get("ALBUMARTIST", [None])[0]
                or song.tags.get("ARTIST", [None])[0]
            )
            print(artist)
            album = album or song.tags.get("ALBUM", [None])[0]
            print(album)
            if artist and album:
                return artist, album
        raise Exception("TODO: prompt for album and artist")

    def _get_info(self):
        artist, album = self._get_artist_album_from_tags()
        mb_info = MusicBrainsInfo(artist, album)

        genre = None
        if mb_info.tag_list:
            for genre_tag in reversed(sorted(mb_info.tag_list, key=lambda x: x["count"])):
                print(">>>>>>>>>>>", genre_tag)
                if genre_tag["name"].lower() in genres:
                    genre = genre_tag["name"].title()
                    break
        if genre is None:
            genre = input("Unable to determine genre; enter the genre: ")

        tracks = {}
        for track in mb_info.track_list:
            tracks[track["number"]] = track["recording"]["title"]

        return {
            "artist": mb_info.release_group["artist-credit"][0]["artist"]["name"],
            "sort-name": mb_info.release_group["artist-credit"][0]["artist"]["sort-name"],
            "album": mb_info.release_group["title"],
            "year": mb_info.release_event["date"].split("-")[0],
            "tracks": tracks,
            "genre": genre,
            "front_cover": mb_info.front_cover,
        }


if __name__ == "__main__":
    al = AudioLibrarian(sys.argv[1:])
