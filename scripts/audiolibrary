#!python
import copy
import os
import pprint
import sys

import musicbrainzngs
import mutagen
from mutagen.flac import FLAC, Picture
from fuzzywuzzy import fuzz

musicbrainzngs.set_useragent("jib-audio", "0.1", "")

genres = ["alternative", "alternative rock", "progressive rock", "rock"]


class MusicBrainsInfo:
    def __init__(self, artist, album, verbose=True):
        self._input_artist = artist
        self._input_album = album
        self._verbose = verbose

        mb_release_group_list = musicbrainzngs.search_release_groups(
            f"{self._input_artist} {self._input_album}", strict=True
        )["release-group-list"]
        for mb_release_group in mb_release_group_list:
            self._pprint("MB_RELEASE_GROUP", mb_release_group)
            print(
                "R>>>>",
                fuzz.ratio(
                    mb_release_group["title"].lower(), self._input_album.lower()
                ),
            )
            title_l = mb_release_group["title"].lower()
            if not (
                mb_release_group["primary-type"] == "Album"
                and fuzz.ratio(title_l, self._input_album.lower()) > 80
            ):
                continue
            for area in ("US", "XW", "GB"):  # XW is "Worldwide"
                for fmt in ("CD", "Digital Media"):
                    print(f">>>> looking for {fmt}")
                    for release in mb_release_group["release-list"]:
                        mb_release = musicbrainzngs.get_release_by_id(
                            release["id"], includes=["recordings"]
                        )["release"]
                        self._pprint("- MB_RELEASE", mb_release, indent=2)
                        for mb_release_event in mb_release.get(
                            "release-event-list", []
                        ):
                            self._pprint("--- EVENT", mb_release_event, indent=4)
                            if area not in mb_release_event.get("area", {}).get(
                                "iso-3166-1-code-list", []
                            ):
                                continue
                            for mb_medium in mb_release["medium-list"]:
                                self._pprint("--- MEDIUM", mb_medium, indent=4)
                                if mb_medium["format"] == fmt:
                                    self.front_cover = musicbrainzngs.get_image_front(
                                        mb_release["id"], size=500
                                    )
                                    self.medium = mb_medium
                                    self.release = mb_release
                                    self.release_event = mb_release_event
                                    self.release_group = mb_release_group
                                    self.tag_list = mb_release_group.get("tag-list", [])
                                    self.track_list = mb_medium["track-list"]
                                    return
        raise Exception("TODO: handle unable to find stuff in MB")

    def _pprint(self, name, obj, indent=0):
        if self._verbose:
            print(name, "-" * (78 - len(name)))
            pprint.pp(obj, indent=indent)
            print("-" * 79)


class AudioLibrarian:
    def __init__(self, filenames):
        self._src_filenames = filenames
        self._info = self._get_info()

        c = copy.deepcopy(self._info)
        c["front_cover"] = len(self._info["front_cover"])
        pprint.pp(c)

        os.system(f'cp "{self._src_filenames[0]}" delme.flac')
        song = FLAC("delme.flac")
        song.delete()
        song.clear_pictures()
        song.update(
            {
                "ARTIST": self._info["artist"],
                "ALBUM": self._info["album"],
                "ALBUMARTIST": self._info["sort-name"],
                "DATE": self._info["year"],
                "GENRE": self._info["genre"].title(),
                "TITLE": self._info["tracks"]["1"],
                "TRACKNUMBER": "1",
                "TRACKTOTAL": str(len(self._info["tracks"])),
            }
        )
        cover = Picture()
        cover.type = 3
        cover.mime = "image/jpeg"
        cover.desc = "front cover"
        cover.data = self._info["front_cover"]
        song.add_picture(cover)
        song.save()

    def _get_artist_album_from_tags(self):
        for filename in self._src_filenames:
            album, artist = None, None
            song = mutagen.File(filename)
            print(song.tags)
            artist = (
                artist
                or song.tags.get("ALBUMARTIST", [None])[0]
                or song.tags.get("ARTIST", [None])[0]
            )
            print(artist)
            album = album or song.tags.get("ALBUM", [None])[0]
            print(album)
            if artist and album:
                return artist, album
        raise Exception("TODO: prompt for album and artist")

    def _get_info(self):
        artist, album = self._get_artist_album_from_tags()
        mb_info = MusicBrainsInfo(artist, album)

        if mb_info.tag_list:
            pprint.pp(mb_info.tag_list)
            genre = max(mb_info.tag_list, key=lambda x: x["count"])["name"]
        else:
            genre = input("Unable to determine genre; enter the genre: ")

        tracks = {}
        for track in mb_info.track_list:
            tracks[track["number"]] = track["recording"]["title"]

        return {
            "artist": mb_info.release_group["artist-credit"][0]["artist"]["name"],
            "sort-name": mb_info.release_group["artist-credit"][0]["artist"][
                "sort-name"
            ],
            "album": mb_info.release_group["title"],
            "year": mb_info.release_event["date"].split("-")[0],
            "tracks": tracks,
            "genre": genre,
            "front_cover": mb_info.front_cover,
        }


if __name__ == "__main__":
    al = AudioLibrarian(sys.argv[1:])
