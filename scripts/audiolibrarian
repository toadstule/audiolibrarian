#!python

"""
PYTHONPATH=$(pwd) scripts/audiolibrarian /media/BlackBox/Music/flac/some_file

"""
import argparse
import logging
import re
import subprocess
import sys

from audiolibrarian.workflows import workflows

log = logging.getLogger("audiolibrarian")

REQUIRED_EXE = (
    "cd-paranoia",
    "eject",
    "faad",
    "fdkaac",
    "flac",
    "lame",
    "mpg123",
    "sndfile-convert",
    "wavegain",
)

LOG_LEVELS = (
    "CRITICAL",
    "ERROR",
    "WARNING",
    "INFO",
    "DEBUG",
)


def check_deps():
    """Check that all of the executables defined in REQUIRED_EXE exist on the system.

    If any of the required executables are missing, list them and exit (exit code 1).
    """
    missing = []
    for exe in REQUIRED_EXE:
        r = subprocess.run(("which", exe), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        if r.returncode:
            missing.append(exe)
    if missing:
        print(f"\nMissing required executable(s): {', '.join(missing)}\n")
        sys.exit(1)


# noinspection PyProtectedMember
def parse_args():
    parser = argparse.ArgumentParser(description="Audio Librarian")
    subparsers = parser.add_subparsers(title="command", dest="command")

    # global options
    parser.add_argument("--log-level", "-l", choices=LOG_LEVELS, help="log-level (default: ERROR")

    # add sub-commands and args for workflows
    for wf in workflows:
        # this is a total hack because argparse won't allow you to add an already
        # existing ArgumentParser as a sub-parser.
        if wf.parser:
            wf.parser.prog = f"{subparsers._prog_prefix} {wf.command}"
            subparsers._choices_actions.append(
                subparsers._ChoicesPseudoAction(wf.command, (), wf.help)
            )
            subparsers._name_parser_map[wf.command] = wf.parser

    return _validate_args(parser.parse_args())


def _validate_args(a):
    if "disc" in a and a.disc:
        if not re.match(r"\d+/\d+", a.disc):
            print("Invalid --disc specification; should be x/y")
            sys.exit(1)
    return a


if __name__ == "__main__":
    args = parse_args()
    logging.basicConfig(level=args.log_level)
    log.info(f"ARGS: {args}")
    check_deps()
    for workflow in workflows:
        if args.command == workflow.command:
            workflow(args)
